// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  name                String
  username            String       @unique
  email               String       @unique
  password            String
  role                Role
  bio                 String
  profileImage        String
  thumbnailImage      String
  lastActiveMessageAt DateTime
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  rooms1              Room[]       @relation(name: "userRoom1")
  rooms2              Room[]       @relation(name: "userRoom2")
  sentMessages        Message[]    @relation(name: "userMessageSender")
  connections1        Connection[] @relation(name: "userConnection1")
  connections2        Connection[] @relation(name: "userConnection2")
  Connection          Connection[]
}

model Room {
  id        String    @id @default(uuid())
  user1     User      @relation(name: "userRoom1", fields: [userId1], references: [id])
  user2     User      @relation(name: "userRoom2", fields: [userId2], references: [id])
  userId1   String
  userId2   String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  room      Room     @relation(fields: [roomId], references: [id])
  sender    User     @relation(name: "userMessageSender", fields: [senderId], references: [id])
  senderId  String
  roomId    String
  text      String
  isLiked   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connection {
  id        String   @id @default(uuid())
  user1     User     @relation(name: "userConnection1", fields: [userId1], references: [id])
  user2     User     @relation(name: "userConnection2", fields: [userId2], references: [id])
  userId1   String
  userId2   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum Role {
  ADMIN
  AI
  USER
  GUEST
}
